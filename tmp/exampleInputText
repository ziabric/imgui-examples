char buff[1024] = "";

void display(ImVec2 size)
{
    ImGui::Begin("Title", nullptr, ImGuiWindowFlags_NoMove + ImGuiWindowFlags_NoTitleBar + ImGuiWindowFlags_NoResize);
    ImGui::SetWindowPos({0,0});
    ImGui::SetWindowSize(size);


    auto style = &ImGui::GetStyle();

    style->WindowPadding = ImVec2(0, 0);
    style->FramePadding = ImVec2(0, 0);
    style->ItemSpacing = ImVec2(0, 0);
    style->FrameBorderSize = 0.0f;

    int n = 1;

    for (int i = 0; i < n; i += 1)
    {
        auto font = ImGui::GetFont();
        font->Scale = size.y * 0.01 / n;

        ImGui::PushItemWidth((float)size.x);
        auto flags = ImGuiInputTextFlags_None;
        ImGui::InputText("##InputText", buff, IM_ARRAYSIZE(buff), flags);
        ImGui::PopItemWidth();
    }

    ImGui::End();
}

int main()
{
    auto window_ = sf::RenderWindow(sf::VideoMode(800, 480), "Window");
    window_.setFramerateLimit(100);

    if(ImGui::SFML::Init(window_))
    {
        ImGuiIO& io = ImGui::GetIO();
        ImFont* customFont = io.Fonts->AddFontFromFileTTF("font.ttf", 100.0f);
        if (!ImGui::SFML::UpdateFontTexture())
        {
            return 1;
        }

        sf::Clock deltaClock;
        while (window_.isOpen())
        {
            sf::Event event{};
            while (window_.pollEvent(event))
            {
                ImGui::SFML::ProcessEvent(window_, event);
                if (event.type == sf::Event::Closed)
                {
                    window_.close();
                }
            }
            ImGui::SFML::Update(window_, deltaClock.restart());
            ImGui::PushFont(customFont);


            display({(float)window_.getSize().x, (float)window_.getSize().y});

            ImGui::PopFont();
            window_.clear();
            ImGui::SFML::Render(window_);
            window_.display();
        }
        ImGui::SFML::Shutdown();
    }
}

